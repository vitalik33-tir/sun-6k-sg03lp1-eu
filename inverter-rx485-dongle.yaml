substitutions:
  name: deye6                                                       #name in ESPhome
  device_description: "Esphome component for Deye sun-6k-sg03lp1"   #Description in ESPhome
  modbus_controller_id: sg03lp1                                      #just a random name for the modbus controler
  device_type: sun6k 

esphome:
  name: ${name}
  friendly_name: Solar Inverter

esp8266:
  board: d1_mini

# Enable logging
logger:
  level: VERBOSE #makes uart stream available in esphome logstream
  baud_rate: 0 #disable logging over uart

# Enable Home Assistant API
api:
  encryption:
    key: "rjNqHhpn8d91Yq/q31OfOe2a7/F2+iwscnBZRha8A+w="

ota:
  - platform: esphome
    password: "281d670f8f05fb70e727851a5c2a3c9c"

wifi:
  ssid: !secret wifi_ssid1
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Inverter-Rx485-Dongle"
    password: "JQO920590wtC"


captive_portal:

uart:
  id: mod_bus
  tx_pin: D6
  rx_pin: D5
  baud_rate: 9600
  stop_bits: 1
 
modbus:
  id: modbus1
# flow_control_pin: 4 #for use when you use a rs485 board without auto flow control. Like the rs485 max board.
 
modbus_controller:
  - id: ${modbus_controller_id}
    address: 0x1
    modbus_id: modbus1
    setup_priority: -10
    update_interval: 15sec
  

text_sensor:
   - platform: modbus_controller
     modbus_controller_id: ${modbus_controller_id}
     skip_updates: 2
     id: ${device_type}_Running_Status
     bitmask: 0
     register_type: holding
     address: 500
     raw_encode: HEXBYTES
     name: ${device_type}-Running Status
     lambda: |-
       uint16_t value = modbus_controller::word_from_hex_str(x, 0);
       switch (value) {
         case 0: return std::string("standby");
         case 1: return std::string("selfcheck");
         case 2: return std::string("normal");
         case 3: return std::string("alarm");
         case 4: return std::string("fault");
         default: return std::string("----");
       }
       return x;
binary_sensor:
  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "Grid Connected"
    id: Grid_connected
    register_type: holding
    address: 194
  
sensor:
  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "Grid voltage"
    id: Grid_voltage
    register_type: holding
    address: 150
    unit_of_measurement: "V"
    state_class: "measurement"
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
    value_type: S_WORD
  
  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    name: "Battery temperature"
    id: Battery_temperature
    register_type: holding
    address: 182
    unit_of_measurement: "Â°C"
    value_type: S_WORD
    accuracy_decimals: 1
    filters:
      #- offset: -1000
      - multiply:  0.1

  - platform: modbus_controller
    modbus_controller_id: ${modbus_controller_id}
    skip_updates: 2
    name: "Battery voltage"
    id: Battery_voltage
    register_type: holding
    address: 183
    unit_of_measurement: "V"
    state_class: "measurement"
    accuracy_decimals: 2
    filters:
      - multiply: 0.01
    value_type: S_WORD
